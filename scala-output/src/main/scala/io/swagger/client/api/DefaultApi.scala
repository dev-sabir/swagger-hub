/**
 * User API
 * OpenAPI Specification for the Apigee user api service endpoint.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.Add
import io.swagger.client.model.ChangepasswordForm
import io.swagger.client.model.Login
import io.swagger.client.model.SignUp
import io.swagger.client.model.Update
import io.swagger.client.model.UpdateProfile
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DefaultApi(
  val defBasePath: String = "http://54.166.78.233:9000/api/user",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DefaultApiAsyncHelper(client, config)

  /**
   * Activate single as well as multiple users
   * 
   *
   * @param authorization  
   * @param ids users ids you want to activate 
   * @return void
   */
  def activateGet(authorization: String, ids: String) = {
    val await = Try(Await.result(activateGetAsync(authorization, ids), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Activate single as well as multiple users asynchronously
   * 
   *
   * @param authorization  
   * @param ids users ids you want to activate 
   * @return Future(void)
   */
  def activateGetAsync(authorization: String, ids: String) = {
      helper.activateGet(authorization, ids)
  }

  /**
   * Get all roles
   * 
   *
   * @param authorization  
   * @return void
   */
  def allrolesGet(authorization: String) = {
    val await = Try(Await.result(allrolesGetAsync(authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all roles asynchronously
   * 
   *
   * @param authorization  
   * @return Future(void)
   */
  def allrolesGetAsync(authorization: String) = {
      helper.allrolesGet(authorization)
  }

  /**
   * Change user password
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return void
   */
  def changepasswordPost(body: ChangepasswordForm, authorization: String) = {
    val await = Try(Await.result(changepasswordPostAsync(body, authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Change user password asynchronously
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return Future(void)
   */
  def changepasswordPostAsync(body: ChangepasswordForm, authorization: String) = {
      helper.changepasswordPost(body, authorization)
  }

  /**
   * Create an account
   * 
   *
   * @param body request payload in application/json 
   * @return void
   */
  def createPost(body: SignUp) = {
    val await = Try(Await.result(createPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create an account asynchronously
   * 
   *
   * @param body request payload in application/json 
   * @return Future(void)
   */
  def createPostAsync(body: SignUp) = {
      helper.createPost(body)
  }

  /**
   * Check email already exists or not
   * 
   *
   * @param email User email 
   * @return void
   */
  def emailexistGet(email: String) = {
    val await = Try(Await.result(emailexistGetAsync(email), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Check email already exists or not asynchronously
   * 
   *
   * @param email User email 
   * @return Future(void)
   */
  def emailexistGetAsync(email: String) = {
      helper.emailexistGet(email)
  }

  /**
   * Login to account
   * 
   *
   * @param body Request payload in application/json 
   * @return void
   */
  def loginPost(body: Login) = {
    val await = Try(Await.result(loginPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Login to account asynchronously
   * 
   *
   * @param body Request payload in application/json 
   * @return Future(void)
   */
  def loginPostAsync(body: Login) = {
      helper.loginPost(body)
  }

  /**
   * Get user profile
   * 
   *
   * @param authorization  
   * @return void
   */
  def profileGet(authorization: String) = {
    val await = Try(Await.result(profileGetAsync(authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get user profile asynchronously
   * 
   *
   * @param authorization  
   * @return Future(void)
   */
  def profileGetAsync(authorization: String) = {
      helper.profileGet(authorization)
  }

  /**
   * Inactivate single as well as multiple user
   * 
   *
   * @param authorization  
   * @param ids users ids you want to remove 
   * @return void
   */
  def removeGet(authorization: String, ids: String) = {
    val await = Try(Await.result(removeGetAsync(authorization, ids), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Inactivate single as well as multiple user asynchronously
   * 
   *
   * @param authorization  
   * @param ids users ids you want to remove 
   * @return Future(void)
   */
  def removeGetAsync(authorization: String, ids: String) = {
      helper.removeGet(authorization, ids)
  }

  /**
   * Sign out from the account
   * 
   *
   * @param authorization  
   * @return void
   */
  def signoutGet(authorization: String) = {
    val await = Try(Await.result(signoutGetAsync(authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sign out from the account asynchronously
   * 
   *
   * @param authorization  
   * @return Future(void)
   */
  def signoutGetAsync(authorization: String) = {
      helper.signoutGet(authorization)
  }

  /**
   * Sum of two numbers
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return void
   */
  def sumPost(body: Add, authorization: String) = {
    val await = Try(Await.result(sumPostAsync(body, authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Sum of two numbers asynchronously
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return Future(void)
   */
  def sumPostAsync(body: Add, authorization: String) = {
      helper.sumPost(body, authorization)
  }

  /**
   * Update user role, name status and organization.
   * 
   *
   * @param authorization  
   * @param body request payload in application/json 
   * @return void
   */
  def updatePost(authorization: String, body: Update) = {
    val await = Try(Await.result(updatePostAsync(authorization, body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update user role, name status and organization. asynchronously
   * 
   *
   * @param authorization  
   * @param body request payload in application/json 
   * @return Future(void)
   */
  def updatePostAsync(authorization: String, body: Update) = {
      helper.updatePost(authorization, body)
  }

  /**
   * Update user profile
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return void
   */
  def updateprofilePost(body: UpdateProfile, authorization: String) = {
    val await = Try(Await.result(updateprofilePostAsync(body, authorization), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Update user profile asynchronously
   * 
   *
   * @param body Request payload in application/json 
   * @param authorization  
   * @return Future(void)
   */
  def updateprofilePostAsync(body: UpdateProfile, authorization: String) = {
      helper.updateprofilePost(body, authorization)
  }

}

class DefaultApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def activateGet(authorization: String,
    ids: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/activate"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->activateGet")

    if (ids == null) throw new Exception("Missing required parameter 'ids' when calling DefaultApi->activateGet")

    queryParams += "ids" -> ids.toString
    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def allrolesGet(authorization: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/allroles"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->allrolesGet")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def changepasswordPost(body: ChangepasswordForm,
    authorization: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[ChangepasswordForm]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/changepassword"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->changepasswordPost")
    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->changepasswordPost")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def createPost(body: SignUp)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[SignUp]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/create"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->createPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def emailexistGet(email: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/emailexist"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (email == null) throw new Exception("Missing required parameter 'email' when calling DefaultApi->emailexistGet")

    queryParams += "email" -> email.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def loginPost(body: Login)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Login]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/login"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->loginPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def profileGet(authorization: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/profile"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->profileGet")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def removeGet(authorization: String,
    ids: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/remove"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->removeGet")

    if (ids == null) throw new Exception("Missing required parameter 'ids' when calling DefaultApi->removeGet")

    queryParams += "ids" -> ids.toString
    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def signoutGet(authorization: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/signout"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->signoutGet")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def sumPost(body: Add,
    authorization: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Add]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/sum"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->sumPost")
    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->sumPost")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updatePost(authorization: String,
    body: Update)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[Update]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/update"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->updatePost")

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->updatePost")
    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def updateprofilePost(body: UpdateProfile,
    authorization: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[UpdateProfile]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/updateprofile"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DefaultApi->updateprofilePost")
    if (authorization == null) throw new Exception("Missing required parameter 'authorization' when calling DefaultApi->updateprofilePost")

    headerParams += "Authorization" -> authorization.toString

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
